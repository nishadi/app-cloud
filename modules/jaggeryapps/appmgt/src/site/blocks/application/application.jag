<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include('/jagg/constants.jag');

var action = request.getParameter("action");
var applicationModule = jagg.module("application");
var gitHubAppModule = jagg.module("application/git");
var log = new Log();
(function(){
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if(action == "uploadExistingArchive"){
        var uploadedArtifact = request.getFile("fileupload");
        var applicationName = request.getParameter("applicationName");
        var appTypeName = request.getParameter("appTypeName");
        var applicationRevision = request.getParameter("applicationRevision");
        applicationModule.uploadExistingArchive(uploadedArtifact, appTypeName, applicationName, applicationRevision);
        response.status = 200;
        response.message = "Artifact is successfully uploaded!";

    } else if (action == "createApplication") {
        var applicationDescription = request.getParameter("applicationDescription");
        var replicas = 1;
        var runtimeId = request.getParameter("runtime");
        var isNewVersion = request.getParameter("isNewVersion");
        if(isNewVersion == null) {
            isNewVersion = false;
        }

        var unparsedRuntimeProps = request.getParameter("runtimeProperties");
        var runtimeProperties = [];
        if(unparsedRuntimeProps){
            runtimeProperties = parse(unparsedRuntimeProps);
        }

        var unparsedTags = request.getParameter("tags");
        var tags = [];
        if(unparsedTags){
            tags = parse(unparsedTags);
        }

        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var appTypeName = request.getParameter("appTypeName");
        var uploadedFileName = request.getParameter("uploadedFileName");
        var appIcon = request.getFile("appIcon");
        var uploadedArtifact = request.getFile("fileupload");
        var isFileAttached = request.getParameter("isFileAttached");
        var conSpecMemory = request.getParameter("conSpecMemory");
        var conSpecCpu = request.getParameter("conSpecCpu");

        // checking whether an application with same name and same version, already exists or not
        var versionHashId = applicationModule.getVersionHashId(applicationName, applicationRevision);
        if (applicationModule.isAplicationVersionExist(versionHashId)) {
            response.status = 400; // bad request
            response.message = "Application with same name and version already exists!";
        } else {
            if (isFileAttached) {
                applicationModule.uploadExistingArchive(uploadedArtifact, appTypeName, applicationName,
                                                        applicationRevision);
            }
            if (uploadedFileName) {
                applicationModule.addApplication(applicationName, applicationRevision, applicationDescription, replicas,
                                                 runtimeId, appTypeName, runtimeProperties, tags, appIcon,
                                                 uploadedFileName, isNewVersion, conSpecMemory, conSpecCpu);
            } else {
                var gitRepoUrl = request.getParameter("gitRepoUrl");
                var gitRepoBranch = request.getParameter("gitRepoBranch");
                var projectRoot = request.getParameter("projectRoot");
                var token = request.getParameter("token");
                gitHubAppModule.addApplicationViaGitHub(applicationName, applicationRevision, applicationDescription,
                                                        replicas, runtimeId, appTypeName, runtimeProperties, tags,
                                                        appIcon, gitRepoUrl, gitRepoBranch, projectRoot, token,
                                                        isNewVersion);
            }
            response.status = 200;
            response.message = "Application creation is successfully submitted";
        }
    }else if(action == "stopApplication"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var versionKey = request.getParameter("versionKey");

        // delete application from kubernetes
        applicationModule.deleteApplicationFromKubernetes(versionKey);
        // update application status to stopped
        applicationModule.updateApplicationStatus(versionKey, APPLICATION_STOPPED);
        applicationModule.deleteEventsOfAppVersions(versionKey);

        response.status = 200;
        response.message = "Application is successfully stopped.";

    } else if(action == "redeployApplication"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var versionKey = request.getParameter("versionKey");

        // redeploy application from kubernetes
        applicationModule.redeployVersion(applicationName, applicationRevision, versionKey);

        response.status = 200;
        response.message = "Application is successfully redeployed.";

    }else if(action == "startApplication"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var versionKey = request.getParameter("versionKey");

        // redeploy application from kubernetes
        applicationModule.redeployApplication(applicationName, applicationRevision, versionKey, conSpecMemory, conSpecCpu);

        response.status = 200;
        response.message = "Application starting requested is completed successfully.";

    } else if (action == "getApplicationCreationEvents") {
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");

        var mod = jagg.module("application");

        var events = mod.getApplicationCreationEvents(applicationName, applicationRevision);
        print(events);
    }else if (action == "getApplication"){
        var applicationName = request.getParameter("applicationName");
        var mod = jagg.module("application");
        var applicationHashId = mod.getApplicationHashIdByName(applicationName);
        var application = mod.getApplication(applicationHashId);
        print(application);
    }else if (action == "getEnvVariablesOfVersion"){

        var versionKey = request.getParameter("versionKey");
        var mod = jagg.module("application");

        var events = mod.getEnvVariablesOfVersion(versionKey);
        print(events);
    }else if (action == "updateRuntimeProperty"){
        var versionKey = request.getParameter("versionKey");
        var prevKey = request.getParameter("prevKey");
        var newKey = request.getParameter("newKey");
        var newValue = request.getParameter("newValue");

        var mod = jagg.module("application");
        mod.updateRuntimeProperty(versionKey,prevKey,newKey,newValue);
        response.status = 200;
        response.content = "Runtime property successfully updated.";

    }else if (action == "deleteRuntimeProperty"){
        var versionKey = request.getParameter("versionKey");
        var key = request.getParameter("key");

        var mod = jagg.module("application");
        mod.deleteRuntimeProperty(versionKey,key);
        response.status = 200;
        response.content = "Runtime property successfully deleted.";

    }else if (action == "addRuntimeProperty"){
        var versionKey = request.getParameter("versionKey");
        var key = request.getParameter("key");
        var value = request.getParameter("value");

        var mod = jagg.module("application");
        mod.addRuntimeProperty(versionKey,key,value);
        response.status = 200;
        response.content = "Runtime property successfully added.";

    }else if (action == "downloadFromUrl"){
        log.info("blocks downloadFromUrl");
        var artfactUrl = request.getParameter("artfactUrl");
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var appTypeName = request.getParameter("appTypeName");
        var mod = jagg.module("application");
        mod.downloadFromUrl(artfactUrl,applicationName,applicationRevision,appTypeName);
    }else if (action == "addTag"){
        var versionKey = request.getParameter("versionKey");
        var key = request.getParameter("key");
        var value = request.getParameter("value");

        var mod = jagg.module("application");
        mod.addTag(versionKey,key,value);
        response.status = 200;
        response.content = "Tag successfully added.";

    }else if (action == "deleteTag"){
        var versionKey = request.getParameter("versionKey");
        var key = request.getParameter("key");

        var mod = jagg.module("application");
        mod.deleteTag(versionKey,key);
        response.status = 200;
        response.content = "Tag successfully deleted.";

    }else if (action == "updateTag"){
        var versionKey = request.getParameter("versionKey");
        var prevKey = request.getParameter("prevKey");
        var newKey = request.getParameter("newKey");
        var newValue = request.getParameter("newValue");

        var mod = jagg.module("application");
        mod.updateTag(versionKey,prevKey,newKey,newValue);
        response.status = 200;
        response.content = "Runtime property successfully updated.";

    }else if (action == "getTags"){

        var versionKey = request.getParameter("versionKey");
        var mod = jagg.module("application");

        var tags = mod.getTags(versionKey);
        print(tags);

    } else if (action == "changeAppIcon"){
        var appIcon = request.getFile("changeIcon");
        var applicationKey = request.getParameter("applicationKey");
        var mod = jagg.module("application");
        mod.changeApplicationIcon(applicationKey, appIcon);
        print("<html><script>window.location.replace('/appmgt/site/pages/home.jag?applicationKey=" + applicationKey + "');</script><body></body></html>");

    } else if (action == "generateApplicationHashId"){
        var applicationName = request.getParameter("applicationName");
        var mod = jagg.module("application");
        print(mod.generateApplicationHashId(applicationName));

    } else if (action == "getVersionHashId"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var mod = jagg.module("application");
        print(mod.getVersionHashId(applicationName, applicationRevision));

    } else if (action == "getExistingRevisions"){
        var applicationName = request.getParameter("applicationName");
        var mod = jagg.module("application");
        var applicationHashId = mod.getApplicationHashIdByName(applicationName);
        var versions = mod.getVersionListOfApplication(applicationHashId);
        print(versions);

    } else if (action == "getApplicationHashIdByName"){
        var applicationName = request.getParameter("applicationName");
        var mod = jagg.module("application");
        var applicationHashId = mod.getApplicationHashIdByName(applicationName);
        print(applicationHashId);
    } else if (action == "deleteVersion"){
        var versionKey = request.getParameter("versionKey");
        var mod = jagg.module("application");

        try {
            mod.deleteVersion(versionKey, false, true);
            print(true);
        } catch (e) {
            var msg = "Error while deleting application version with the hash id : " + versionKey;
            log.error(msg);
            log.error(e);
            response.status = 500;
            response.content = msg;
        }

    } else if (action == "deleteApplication"){
        var applicationKey = request.getParameter("applicationKey");
        var mod = jagg.module("application");
        try {
            mod.deleteApplication(applicationKey);
            print(true);
        } catch (e) {
            var msg = "Error while deleting application with hash id : " + applicationKey;
            log.error(msg);
            log.error(e);
            response.status = 500;
            response.content = msg;
        }

    } else {
        throw new Error("No action specified for: " + action);
    }
}());

%>